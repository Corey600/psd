var N=null,E="",T="t",U="u",searchIndex={};
var R=["Currently unsupported","Adobe Docs","psdchannelcompression","result","psdchannelkind","error","psddepth","colormode","height","psdlayer","compression","try_from","try_into","borrow_mut","type_id","to_owned","clone_into","borrow","typeid","ordering","formatter","PsdChannelCompression","PsdChannelKind","ColorMode","PsdDepth","PsdLayer"];
searchIndex["psd"]={"doc":"Data structures and methods for working with PSD files.","i":[[3,R[25],"psd","Information about a layer in a PSD file.",N,N],[3,"Psd",E,"Represents the contents of a PSD file",N,N],[4,R[21],E,"Indicates how a channe'sl data is compressed",N,N],[13,"RawData",E,"Not compressed",0,N],[13,"RleCompressed",E,"Compressed using PackBits RLE compression",0,N],[13,"ZipWithoutPrediction",E,R[0],0,N],[13,"ZipWithPrediction",E,R[0],0,N],[4,R[22],E,"The different kinds of channels in a layer (red, green,…",N,N],[13,"Red",E,E,1,N],[13,"Green",E,E,1,N],[13,"Blue",E,E,1,N],[13,"TransparencyMask",E,E,1,N],[13,"UserSuppliedLayerMask",E,E,1,N],[13,"RealUserSuppliedLayerMask",E,E,1,N],[4,R[23],E,R[1],N,N],[13,"Bitmap",E,E,2,N],[13,"Grayscale",E,E,2,N],[13,"Indexed",E,E,2,N],[13,"Rgb",E,E,2,N],[13,"Cmyk",E,E,2,N],[13,"Multichannel",E,E,2,N],[13,"Duotone",E,E,2,N],[13,"Lab",E,E,2,N],[4,R[24],E,R[1],N,N],[13,"One",E,E,3,N],[13,"Eight",E,E,3,N],[13,"Sixteen",E,E,3,N],[13,"ThirtyTwo",E,E,3,N],[11,"new",E,"Create a new PsdLayerChannelCompression",0,[[["u16"]],[[R[2]],[R[3],[R[2],R[5]]],[R[5]]]]],[11,"new",E,"Create a new PsdLayerChannel",1,[[["i16"]],[[R[4]],[R[5]],[R[3],[R[4],R[5]]]]]],[11,"rgba_offset",E,"R -> 0 G -> 1 B -> 2 A -> 3",1,[[],[[R[5]],[R[3],["usize",R[5]]],["usize"]]]],[11,"new",E,"Create a new PsdDepth",3,[[["u8"]],[[R[5]],[R[3],[R[6],R[5]]],[R[6]]]]],[11,"new",E,"Create a new ColorMode",2,[[["u8"]],[[R[5]],[R[3],[R[7],R[5]]],[R[7]]]]],[11,"new",E,"Create a new photoshop layer",4,[[["u32"],["i32"],["string"]],[R[9]]]],[11,"name",E,"Get the name of the layer",4,[[["self"]],["str"]]],[11,"width",E,"The width of the layer",4,[[["self"]],["u16"]]],[11,R[8],E,"The height of the layer",4,[[["self"]],["u16"]]],[11,R[10],E,"Get the compression level for one of this layer's channels",4,[[[R[4]],["self"]],[[R[2]],[R[3],[R[2],R[5]]],[R[5]]]]],[11,"rgba",E,"Create a vector that interleaves the red, green, blue and…",4,[[["self"]],[[R[3],["vec",R[5]]],["vec",["u8"]],[R[5]]]]],[11,"from_bytes",E,"Create a Psd from a byte slice.",5,[[],[["psd"],[R[5]],[R[3],["psd",R[5]]]]]],[11,"width",E,"The width of the PSD file",5,[[["self"]],["u32"]]],[11,R[8],E,"The height of the PSD file",5,[[["self"]],["u32"]]],[11,"depth",E,"The number of bits per channel",5,[[["self"]],[R[6]]]],[11,"color_mode",E,"The color mode of the file",5,[[["self"]],[R[7]]]],[11,"layers",E,"Get all of the layers in the PSD",5,[[["self"]],["vec"]]],[11,"layer_by_name",E,"Get a layer by name",5,[[["str"],["self"]],[[R[5]],[R[9]],[R[3],[R[9],R[5]]]]]],[11,"layer_by_idx",E,"Get a layer by index.",5,[[["self"],["usize"]],[[R[5]],[R[9]],[R[3],[R[9],R[5]]]]]],[11,"flatten_layers_rgba",E,"Given a filter, combine all layers in the PSD that pass…",5,[[["fn"],["self"]],[[R[3],["vec",R[5]]],["vec",["u8"]],[R[5]]]]],[11,"rgba",E,"Get the RGBA pixels for the PSD [ R,G,B,A, R,G,B,A,…",5,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,R[10],E,"Get the compression level for the flattened image data",5,[[["self"]],[R[2]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[11],E,E,4,[[[U]],[R[3]]]],[11,R[12],E,E,4,[[],[R[3]]]],[11,R[17],E,E,4,[[["self"]],[T]]],[11,R[13],E,E,4,[[["self"]],[T]]],[11,R[14],E,E,4,[[["self"]],[R[18]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[11],E,E,5,[[[U]],[R[3]]]],[11,R[12],E,E,5,[[],[R[3]]]],[11,R[17],E,E,5,[[["self"]],[T]]],[11,R[13],E,E,5,[[["self"]],[T]]],[11,R[14],E,E,5,[[["self"]],[R[18]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[11],E,E,0,[[[U]],[R[3]]]],[11,R[12],E,E,0,[[],[R[3]]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[R[18]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[15],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"],[T]]]],[11,R[11],E,E,1,[[[U]],[R[3]]]],[11,R[12],E,E,1,[[],[R[3]]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[R[18]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[15],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"],[T]]]],[11,R[11],E,E,2,[[[U]],[R[3]]]],[11,R[12],E,E,2,[[],[R[3]]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[13],E,E,2,[[["self"]],[T]]],[11,R[14],E,E,2,[[["self"]],[R[18]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[15],E,E,3,[[["self"]],[T]]],[11,R[16],E,E,3,[[["self"],[T]]]],[11,R[11],E,E,3,[[[U]],[R[3]]]],[11,R[12],E,E,3,[[],[R[3]]]],[11,R[17],E,E,3,[[["self"]],[T]]],[11,R[13],E,E,3,[[["self"]],[T]]],[11,R[14],E,E,3,[[["self"]],[R[18]]]],[11,"clone",E,E,1,[[["self"]],[R[4]]]],[11,"clone",E,E,3,[[["self"]],[R[6]]]],[11,"clone",E,E,2,[[["self"]],[R[7]]]],[11,"cmp",E,E,1,[[[R[4]],["self"]],[R[19]]]],[11,"eq",E,E,0,[[["self"],[R[2]]],["bool"]]],[11,"eq",E,E,1,[[[R[4]],["self"]],["bool"]]],[11,"eq",E,E,3,[[[R[6]],["self"]],["bool"]]],[11,"eq",E,E,2,[[[R[7]],["self"]],["bool"]]],[11,"partial_cmp",E,E,1,[[[R[4]],["self"]],[[R[19]],["option",[R[19]]]]]],[11,"fmt",E,E,0,[[[R[20]],["self"]],[R[3]]]],[11,"fmt",E,E,1,[[[R[20]],["self"]],[R[3]]]],[11,"fmt",E,E,3,[[[R[20]],["self"]],[R[3]]]],[11,"fmt",E,E,2,[[[R[20]],["self"]],[R[3]]]],[11,"fmt",E,E,4,[[[R[20]],["self"]],[R[3]]]],[11,"fmt",E,E,5,[[[R[20]],["self"]],[R[3]]]],[11,"hash",E,E,1,[[["self"],["__h"]]]]],"p":[[4,R[21]],[4,R[22]],[4,R[23]],[4,R[24]],[3,R[25]],[3,"Psd"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);